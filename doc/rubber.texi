\input texinfo
@c %**start of header
@setfilename rubber.info
@settitle Rubber Manual 0.99.7
@c %**end of header

@copying
Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

Permission is granted to copy and distribute modified
versions of this manual under the conditions for
verbatim copying, provided also that the sections
entitled ``Copying'' and ``GNU General Public License''
are included exactly as in the original, and provided
that the entire resulting derived work is distributed
under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute
translations of this manual into another language,
under the above conditions for modified versions,
except that this permission notice may be stated in a
translation approved by the Free Software Foundation.

Copyright @copyright{} 2003 Emmanuel Beffara.
@end copying

@titlepage
@title Rubber
@subtitle Documentation for version 0.99.7
@author Emmanuel Beffara
@page
@vskip 0pt plus 1fill
@insertcopying
@end titlepage

@iftex
@contents
@end iftex

@c ---  Introduction  ---

@dircategory teTeX
@direntry
* Rubber: (rubber).   A building system for LaTeX documents.
@end direntry

@ifnottex
@node Top, Introduction
@top Rubber

Rubber is a wrapper for LaTeX and companion programs. Its purpose is,
given a LaTeX source to process, to compile it enough times to resolve
all references, possibly running satellite programs such as BibTeX,
makeindex, Metapost, etc. to produce appropriate data files.
@end ifnottex

@menu
* Introduction::  Introduction.

* Invoking::      Syntax of the command lines.
* Directives::    Directives in LaTeX comments.
* Modules::       List of standard modules.
* Graphics::      Support for graphics conversion.

* Programming::   Writing modules and embedding Rubber.

* Index::         Directive and modules index.
@end menu

@node Introduction, Invoking, Top, Top
@chapter Introduction

The purpose of Rubber is to make the building of a document automated, from
the source files to the final document file, replacing the work of a Makefile.

The basis is a routine that compiles a LaTeX source the right number of times
to resolve all references and make all tables of contents, list of figures,
and so on. On top of that, Rubber provides a modular system to handle various
tasks needed apart from compilations. This, for instance, includes processing
bibliographic references or indices, as well as compilation or conversion of
figures. Additionally, modules can perform a post-processing of the document
(for instance to convert a DVI to PostScript or PDF) or even a preprocessing
(useful when the LaTeX source is generated by another program, like cweave).

Dependency analysis is performed by parsing the source files, so that
modifying any source, user package, graphics file or other dependency leads to
appropriate compilations. Modules are triggered either explicitly using
command line options, or implicitly when the sources are parsed. For instance,
BibTeX support is activated whenever the source contains commands that
generate a bibliography, graphics support is activated by
@code{\usepackage@{graphics@}} and similar commands, and so on. The modular
approach allows any additional feature to be supported by simply writing a
module to support it.

Some information cannot be extracted from the LaTeX sources. This is the case,
for instance, with the search paths (which can be specified in environment
variables like @env{TEXINPUTS}), or the style to be used with Makeindex. To
address this problem, one can add information for Rubber in the comments of
the LaTeX sources, see @ref{Directives}.

The package comes with three different command line programs:

@table @command
@item rubber
Builds the specified documents completely. The source files may be either
LaTeX sources or documents in a format Rubber knows how to translate into
LaTeX.
@item rubber-pipe
Does the same for one document but it reads the LaTeX source from standard
input and dumps the compiled document on standard output.
@item rubber-info
This is a utility for extracting various kinds of information from a LaTeX
document, either from the source or from the compilation log files.
@end table


@c ---  Command-line syntax  ---

@node Invoking, rubber command line, Introduction, Top
@chapter Command lines

The command line of each program is read using the GNU Getopt conventions.
@command{rubber} and @command{rubber-pipe} mostly have the same syntax.

@menu
* rubber command line::       Syntax for @command{rubber} and @command{rubber-pipe}.
* rubber-info command line::  Syntax for @command{rubber-info}.
@end menu

@node rubber command line, rubber-info command line, Invoking, Invoking
@section Syntax for @command{rubber} and @command{rubber-pipe}

The syntax of the command lines for @command{rubber} and @command{rubber-pipe}
are:

@example
rubber [options] files
rubber-pipe [options]
@end example

@noindent
The source files may be either LaTeX sources (in which case the suffix
@file{.tex} may be omitted) or documents in a format Rubber knows how to
translate into LaTeX (this currently means CWEB or Literate Haskell
documents). If any compilation fails, the whole process stops, including the
compilation of the next documents on the command line, and the program returns
a non-zero exit code.

The options are the following:

@table @option
@item --clean
Remove all files produced by the compilation, instead of building the
document. This option is present in rubber only. It applies to the compilation
as it would be done with the other options of the command line, i.e. saying
@example
rubber --clean foo
@end example
will not delete foo.ps, while saying
@example
rubber --ps --clean foo
@end example
will.

@item -c
@itemx --command <command>
Execute the specified command (or directive) @emph{before} parsing the source
files. @xref{Directives}.

@item -e
@itemx --epilogue <command>
Execute the specified command (or directive) @emph{after} parsing the source
fiels. @xref{Directives}.

@item -f
@itemx --force
Force at least one compilation of the source. This may be useful, for
instance, if some unusual dependency was modified (e.g. a package in a system
directory). This option is irrelevant in rubber-pipe.

@item -z
@itemx --gzip
Compress the final document (in @command{gzip} format). This option is a
synonym for @option{-e module gz}.

@item -h
@itemx --help
Display the list of all available options and exit nicely.

@item -k
@itemx --keep
This option is for @command{rubber-pipe} only. With this option, the temporary
files will not be removed after compiling the document and dumping the results
on standard output. The temporary document is named @file{rubtmpX.tex}, where
@file{X} is a number such that no file of that name exists initially.

@item -l
@itemx --landscape
Specify that the final document should use landscape orientation. This is
relevant only when using @command{dvips} or @command{dvipdfm}.

@item -m
@itemx --module <module>[:<args>]
Use the specified module in addition to the document's packages. Arguments
can be passed to the package by adding them after a colon, they correspond to
the package options in LaTeX.

@item -d
@itemx --pdf
Use pdfLaTeX instead of LaTeX in order to produce PDF output
instead of DVI. This option is a synonym for @option{-e module pdftex}.

@item -p
@itemx --ps
Process the DVI produced by the process through @command{dvips} to produce a
PostScript document. This option is a synonym for @option{-e module dvips}, it
is naturally incompatible with @option{--pdf}.

@item -q
@itemx --quiet
Suppress all messages during the process.

@item -r
@itemx --read <file>
Read additional directives form the specified file (see also the directive
@command{read}).

@item -s
@itemx --short
Display LaTeX's error messages in a compact form (one error per line).

@item -I
@itemx --texpath <dir>
Add the specified directory to the search path of TeX files.

@item -v
@itemx --verbose
Increase the verbosity level. The default level is 0, levels up to 3 exist.
Beware, saying @option{-vvv} makes Rubber speak a lot.

@item --version
Print the version number and exit nicely.
@end table

@node rubber-info command line, Directives, rubber command line, Invoking
@section Syntax for @command{rubber-info}

The command-line syntax for @command{rubber-info} is the following:

@example
rubber-info [options] [action] source
@end example

The @option{action} specified what kind of information has to be extracted. At
most one such argument must be present on the command line, @option{--check}
is assumed if none is present. The possible actions are:

@table @option
@item --boxes
Extracts from the log file the places in the source where bad boxes appeared
(these are the famous overfull and underfull @code{\hbox} and @code{\vbox}).

@item --check
Report errors if there are any, otherwise report undefined references if there
are any, otherwise list warnings and bad boxes. This is the default action.

@item --deps
Analyse the source files and produce a space-separated list of all the files
that the document depends on and that Rubber cannot rebuild.

@item --errors
Extract from the log file the list of errors that occured during the last
compilation.

@item -h
@itemx --help
Display the list of all available options and exit nicely.

@item --refs
Show a list of undefined references (i.e. the @code{\ref}'s that are not
defined by any @code{\label}).

@item --version
Print the version number and exit nicely.

@item --warnings
Stupidly enumerate all LaTeX warnings, i.e. all the lines in the log file that
contain the string "Warning".
@end table

@noindent
In addition to these actions, the following optionds may be specified:

@table @option
@item -m
@itemx --module <module>[:<args>]
Use the specified module in addition to the document's packages. Arguments
can be passed to the package by adding them after a colon, they correspond to
the package options in LaTeX.

@item -s
@itemx --short
Display LaTeX's error messages in a compact form (one error per line).

@item -v
@itemx --verbose
Increase the verbosity level. The default level is 0, levels up to 3 exist.
@end table


@c ---  Directives  ---

@node Directives, General directives, rubber-info command line, Top
@chapter Directives

Some information cannot be extracted from the LaTeX sources. To address this
problem, one can add information for Rubber in the comments of the LaTeX
sources, in the form of directives. A directive is a line like

@example
% rubber: cmd args
@end example

@noindent
The line must begin with a @samp{%}, then any sequence of @samp{%} signs and
spaces, then the text @samp{rubber:} followed by zero or more spaces and a
directive name, possibly followed by spaces and arguments.

If a directive name has the form @samp{foo.bar}, it is considered a command
@command{bar} for the module @command{foo}. If this module is not registered
when the directive is found, then the directive is silently ignored. See the
individual documentation for modules for module-specific directives.

@menu
* General directives::
@end menu

@node General directives, Modules, Directives, Directives
@section General directives

@ftable @command
@item clean <file>
Indicates that the specified file should be removed when cleaning using
@option{--clean}.

@item depend <file>
Consider the specified file as a dependency, so that its modification time
will be checked.

@item module <module> [<options>]
Loads the specified module, possibly with options. This is equivalent to
the command-line option @command{--module}.

@item paper <options>
Specify options related to paper size. Currently they are used to give
@option{-t} options to @command{dvips} and @option{-p} options to
@command{dvipdfm}.

@item path <directory>
Adds the specified directory to the search path for TeX (and Rubber). The
name of the directory is everything that follows the spaces after
@samp{path}.

@item read <file>
Read the specified file of directives. The file must contain one directive per
line. Empty lines and lines that begin with @samp{%} are ignored.

@item watch <file>
Watch the specified file for changes. If the contents of this file has
changed after a compilation, then another compilation is triggered. This is
useful in the case of tables of contents, for instance.
@end ftable


@c ---  Modules  ---

@node Modules, Packages, General directives, Top
@chapter Modules

@menu
* Packages::           Supported LaTeX packages.
* Pre-processing::     Files format that can be converted into LaTeX.
* Post-processing::    Post-processing the compiler's output.
* Compiler choice::    Choosing which LaTeX compiler to use.
@end menu

@node Packages, BibTeX, Modules, Modules
@section Supported Packages

For every package that a document uses, Rubber looks for a module of
the same name to perform the tasks that this package my require apart
from the compilation by LaTeX. Modules can be added to the ones provided by
default to include new features (this is the point of the module system). The
standard modules are the following:

@vtable @command
@item beamer
This module handles Beamer's @file{.head} files the same way as other tables
of contents.

@item bibtex
Takes care of processing the document's bibliography with BibTeX when needed.
This module is automatically loaded if the document contains the macro
@code{\bibliography}. For details, see @ref{BibTeX}.

@item combine
The combine package is used to gather several LaTeX documents into a single
one, and this module handles the dependencies in this case.

@item epsfig
This modules handles graphics inclusion for the documents that use the old
style @code{\psfig} macro. It is actually an interface for the graphics
system, for details see @ref{Graphics}.

@item graphics
@itemx graphicx
These modules identify the graphics included in the document and consider them
as dependencies for compilation. They also use standard rules to build these
files with external programs. For more details, see @ref{Graphics}.

@item makeidx
Process the document's index with @command{makeindex} when needed. For
details, see @ref{Makeindex}.

@item minitoc
@itemx minitoc-hyper
On cleaning, remove additional files that produced to make partial tables of
contents.

@item moreverb
@itemx verbatim
Adds the files included with @code{\verbatiminput} and similar macros to the
list of dependencies.

@item multibib
Handles the extra bibliographies that this package creates, and removes the
extra files on cleaning.

@item natbib
May cause an extra compilation to solve references.

@item xr
Add additional @file{.aux} files used for external references to the list of
dependencies, so recompiling is automatic when refer- enced document are
changed.
@end vtable

@menu
* BibTeX::       Details on BibTeX support.
* Makeindex::    Details on Makeindex support.
@end menu

@node BibTeX, Makeindex, Packages, Packages
@subsection BibTeX support

If the document contains a call to @code{\bibliography} or
@code{\bibliographystyle}, then the BibTeX module is used. This triggers the
execution of BibTeX between compilations when new references are made,
bibliographies are changed, and in other appropriate cases. The following
directives may be used to control BibTeX's behaviour:

@ftable @command
@item bibtex.path <directory>
Add the specified directory to the seach path for BibTeX database files
(@file{.bib} files).

@item bibtex.stylepath <directory>
Add the specified directory  to  the  search  path  for  BibTeX style files
(@file{.bst} files).
@end ftable

@node Makeindex, Pre-processing, BibTeX, Packages
@subsection Makeindex support

The use of @command{makeidx} package triggers the use of @command{makeindex}
when necessary to process the document's index. The following directives may
be used to control how @command{makeindex} is called:

@ftable @command
@item makeidx.order <options>
Modifies the sorting options for the index. Tha argument must be a
space-separated list of words among @samp{standard}, @samp{german} and
@samp{letter}.

@item makeidx.path <directory>
Adds the specified directory to the search path for index style files
(@file{.ist} files).

@item makeidx.style <style>
Specifies the index style to be used.
@end ftable

@node Pre-processing, Post-processing, Makeindex, Modules
@section Pre-processors

The following modules are provided for using programs that generate a LaTeX
source from a different file format:

@vtable @command
@item cweb
This module's purpose is to run @command{cweave} if needed before the
compiling process to produce the LaTeX source. This module is automatically
loaded if the file specified on the command line has @file{.w} as its suffix.

@item lhs2TeX
This module uses the @command{lhs2tex} preprocessor to generate the LaTeX
source from a Literate Haskell program. It is automatically triggered if the
input file's name ends with @file{.lhs}.
@end vtable

@node Post-processing, Dvips and Dvipdfm, Pre-processing, Modules
@section Post-processors

The following modules are provided to support different kinds of
post-processings:

@vtable @command
@item dvipdfm
Runs @command{dvipdfm} at the end of compilation to produce a PDF document.

@item dvips
Runs @command{dvips} at the end of compilation to produce a PostScript
document. This module is also loaded by the command line option @option{--ps}.

@item expand
Produce an expanded LaTeX source by replacing @code{\input} macros by included
files, bibliography macros by the bibliography produced by @command{bibtex},
and local classes and packages by their source. For details, see @ref{Expand}.

@item gz
Produce a verion of the final document compressed with @command{gzip}.
@end vtable

@menu
* Dvips and Dvipdfm::    Details on DVI to PS/PDF conversion.
* Expand::               Details on the source expansion plugin.
@end menu

@node Dvips and Dvipdfm, Expand, Post-processing, Post-processing
@subsection Dvips and Dvipdfm

The @command{dvips} and @command{dvipdfm} modules can be used to call the
associated DVI drivers to produce PostScript or PDF documents from the DVI
output of LaTeX. The following directives may be used to change their
behaviour:

@ftable @command
@item paper <options>
Specify options related to paper size. Currently they are used to give
@option{-t} options to @command{dvips} and @option{-p} options to
@command{dvipdfm}. The command-line option @option{--landscape} is equivalent
to the directive @samp{paper landscape}.

@item dvipdfm.options <options>
@itemx dvips.options <options>
Pass the specified options to the driver. The argument is a space-separated
list of options that are passed before the DVI file's name.
@end ftable

@node Expand, Compiler choice, Dvips and Dvipdfm, Post-processing
@subsection Source file expansion

The module @command{expand} produces a LaTeX source from the original one by
expanding included files and packages. If the main file is @file{foo.tex}
then then expanded file will be named @file{foo-final.tex}. This file will be
self-contained, in particular it will not need BibTeXing nor user-defined
packages, as may be required when preparing the final version of a document
for publication.

As additional effect, this module removes all comments from the source file
(including those that may contain Rubber directives). It also removes any text
that may be present after @code{\end@{document@}}.

Please note that this module is rather experimental.

@noindent
The following options control how the expansion is done:

@table @option
@item class
If the document class is user-defined (i.e. if it is in a local directory
instead of a system directory), the @code{\documentclass} call will be
replaced by the code of the @file{.cls} file. Note that this is dangerous in
general.

@item nobib
Do not expand the bibliography. When this option is @emph{not} present, any
call to @command{\bibiography} is discarded and the call to
@command{\bibliographystyle} is replaced by the document's @file{.bbl} file.

@item nopkg
Do not expand user-defined packages. When this option is @emph{not} present,
local packages (i.e. those that are in the current directory) are replaced by
their contents.
@end table

@node Compiler choice, Graphics, Expand, Modules
@section Changing compilers

The following modules are used to change the LaTeX compiler:

@vtable @command
@item pdftex
Instructs Rubber to use @command{pdflatex} instead of @command{latex} to
compile the document. By default, this produces a PDF file instead of a DVI,
but when loading the module with the option @option{dvi} (for instance by
saying @option{-m pdftex:dvi}) the document is compiled into DVI using
@command{pdflatex}.  This module is also loaded by the command line option
@option{--pdf}.

@item vtex
Instructs Rubber to use the VTeX compiler. By default this uses
@command{vlatex} as the compiler to produce PDF output. With the option
@option{ps} (e.g. when saying @command{rubber -m vtex:ps foo.tex}) the
compiler used is @command{vlatexp} and the result is a PostScript file.
@end vtable


@c ---  Graphics conversion  ---

@node Graphics, Programming, Compiler choice, Top
@chapter Graphics conversion

Rubber includes a system for automatic conversion of graphics between various
file formats. This is used when graphics are included using commands from the
packages @command{graphicx}, @command{graphics} or @command{epsfig}.

When a graphics inclusion macro like @command{\includegraphics} (even with the
parameters allowed by the @command{graphicx} package) or @command{\epsfig} is
found in a LaTeX source, Rubber looks for the corresponding file or a way to
generate it. If the call to the macro does not specify a file extension, then
the list of possible suffixes for the current compiler is tried. For each
possible file name, Rubber first tries to find a way to convert this file from
a source, and then looks for the file itself. This way, the source file will
be considered as the actual dependency.

The path searched for graphics files is the same as that for LaTeX inputs by
default. If the macro @command{\graphicspath} is used, the specified paths are
also searched, the same way as LaTeX does. Limited support is also provided
for the @command{\DeclareGraphicsExtensions} and
@command{\DeclareGraphicsRule} macros.

@noindent
The following programs may be used when available:

@table @command
@item convert
This is the image conversion program from the ImageMagick program. It can
convert between a lot of different formats, just refer to ImageMagick's
documentation for details.

@item epstopdf
This program is used to convert EPS graphics for use in PDF documents.

@item fig2dev
This is the exporting program that goes with XFig. It is used to convert files
in @file{.fig} format into EPS, PDF or PNG. Rubber also supports the use of
combined EPS/LaTeX, it is detected when an @command{\input} macro refers to a
filename that ends in @file{.eps_t} or @file{.pstex_t}.

@item jpeg2ps
This tool is used to convert JPEG images into efficient EPS files.

@item mpost
MetaPost has extra support in Rubber. If a graphics is included with a
filename that ends with a dot and a decimal number like @file{foo.42}, then
it is considered to be generated from @file{foo.mp} if it exists. Dependency
analysis is performed between MetaPost sources, so that recompilation always
occurs when needed. If the compilation of a MetaPost source fails, the errors
are reported as it would be done for LaTeX errors.
@end table

@c ---  Programming with Rubber  ---

@node Programming, Program structure, Graphics, Top
@chapter Programming with Rubber

Rubber is written in the Python language. Its structure makes it possible to
use the compilation system from any Pyhton program. The module system is
based on Python's ability to load modules at run time.

This chapter is widely incomplete.

@menu
* Program structure::  The classes and interfaces in Rubber.
* Writing modules::    How to write modules to support packages and programs.
* Embedding Rubber::   How to use the compilation system in a program.
@end menu

@node Program structure, Writing modules, Programming, Programming
@section The structure of Rubber

The core of the program is contained in a Python package named @code{rubber},
which resides in an installation-dependent directory like
@file{/usr/share/rubber}. The classes defined in this module are the
following:

@table @code
@item Environment
This is the core of Rubber. An object in this class contains information about
a given document, including a dependency graph between source files, a set of
loaded modules, and settings about how the document is built.
@item Message
All messages, including progress and error reports, are issued using an
instance of a class that implements the interface Message.
@end table

@node Writing modules, Embedding Rubber, Program structure, Programming
@section Writing Rubber modules

The modules that handle packages, pre- and post-processing and compiler change
are the Python modules in the package @code{rubber.modules}. Each module must
define a class @code{Module} that derives from @code{rubber.Module}. An object
of this class is created for each document that uses the module.

The @code{__init__} method takes the building environment as its first
argument and a dictionary as its second argument. This dictionary describes
the command that caused the module to be loaded, its keys are the
following:

@table @code
@item name
the macro's name (i.e. @samp{usepackage} or @samp{RequirePackage}, or
undefined if the module is loaded from the command line)
@item arg
the module's name (i.e. the argument of the macro)
@item opt
the module's options or @code{None} (either @code{\usepackage}'s optional
argument or the module options on the command line)
@end table

@noindent
The @code{__init__} function is supposed to register the macros supported by
the module using the following method of the environment:

@table @code
@item add_hook(name, fun)
The function @code{fun} will be called when the macro of the given name is
found. This function recieves as argument a dictionary that describes the
macro call with the following keys:
@table @code
@item name
the name of the macro
@item opt
the optional argument or @code{None}
@item arg
the first argument (if it doesn't contain any brace) or @code{None}
@item line
the rest of the line where the macro occurs
@end table
@end table

@node Embedding Rubber, Index, Writing modules, Programming
@section Embedding Rubber

This section will describe how to use Rubber directly from your program.


@c ---  Indices  ---

@node Index, Directive index, Embedding Rubber, Top
@chapter Index

@menu
* Directive index::
* Module index::
@end menu

@node Directive index, Module index, Index, Index
@ifnothtml
@section Index of directives
@printindex fn
@end ifnothtml

@node Module index, , Directive index, Index
@ifnothtml
@section Index of modules
@printindex vr
@end ifnothtml

@bye
